on:
  push:
    branches: 
    - develop

name: BuildProcess

env:
  AWS_REGION: ap-northeast-1
  AWS_ROLE_ARN: arn:aws:iam::858884198044:role/github_deployment_develop
  BUILD_ENV: develop
  IMAGE_TAG: develop-${{ github.sha }}
  TASK_DEFINITION_FILE: simple-community-develop/api-main/task-definition.json
  TARGET_RELEASE_ECR_REPOSITORY: simple-community-api-main
  TARGET_RELEASE_CONTAINER_NAME: api
  DEPLOY_REPO_NAME: simple-community-deploy
  DEPLOY_REPO_REF: refs/heads/develop
  GIT_USER_NAME: Deploy
  GIT_USER_EMAIL: yoshinori.satoh.tokyo@gmail.com
  SLACK_WEBHOOK: ${{ secrets.SIMPLE_COMMUNITY_DEV_SLACK_WEBHOOK }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        include: 
        - target: release

    steps:        
    - name: Checkout
      uses: actions/checkout@v2

    # https://awsteele.com/blog/2021/09/15/aws-federation-comes-to-github-actions.html
    - name: Configure AWS
      run: |
        export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
        echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
        echo AWS_ROLE_ARN=${{ env.AWS_ROLE_ARN }} >> $GITHUB_ENV
        echo AWS_DEFAULT_REGION=${{ env.AWS_REGION }} >> $GITHUB_ENV
        curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to ECR
      id: build
      run: |
        # ターゲットに対応するECRリポジトリ名を取得
        if matrix.target == "release"; then
          ecr_repository=${{ env.TARGET_RELEASE_ECR_REPOSITORY }}
        else
          exit 1
        fi

        # 同じイメージタグを再度pushしないため、既にこのコミットのgit.shaのタグが付けられたイメージが存在していればスキップ
        IMAGE_URL=${{ steps.login-ecr.outputs.registry }}/${{ matrix.ecr_repository }}:${{ env.IMAGE_TAG }}
        docker pull $IMAGE_URL && true
        if [ "`docker image ls -q $IMAGE_URL`" ]; then
          echo "Image $IMAGE_URL already exist."
          echo "Skip build and push image."
          exit 0
        fi

        # ビルド & プッシュ
        DOCKER_BUILDKIT=1 docker build \
          --target ${{ matrix.target }} \
          -t $IMAGE_URL \
          .
        docker push $IMAGE_URL

  updateTaskDefinitions:
    name: UpdateTaskDefinitions
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      status: ${{ job.status }}

    steps:        
    # https://awsteele.com/blog/2021/09/15/aws-federation-comes-to-github-actions.html
    - name: Configure AWS
      run: |
        export AWS_WEB_IDENTITY_TOKEN_FILE=/tmp/awscreds
        echo AWS_WEB_IDENTITY_TOKEN_FILE=$AWS_WEB_IDENTITY_TOKEN_FILE >> $GITHUB_ENV
        echo AWS_ROLE_ARN=${{ env.AWS_ROLE_ARN }} >> $GITHUB_ENV
        echo AWS_DEFAULT_REGION=${{ env.AWS_REGION }} >> $GITHUB_ENV
        curl -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL" | jq -r '.value' > $AWS_WEB_IDENTITY_TOKEN_FILE

    - name: Login to ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Checkout
      uses: actions/checkout@v2
      with:
        repository: ${{ github.repository_owner }}/${{ env.DEPLOY_REPO_NAME }}
        ref: ${{ env.DEPLOY_REPO_REF }}
        token: ${{ secrets.DEPLOY_PERSONAL_ACCESS_TOKEN }}

    - name: update-task-definitions
      id: update-task-definitions
      run: |
          image=${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.API_MAIN_ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          taskdef=$(cat ${{ env.TASK_DEFINITION_FILE }} | jq 'select(.containerDefinitions[].name == "${{ env.API_MAIN_CONTAINER_NAME }}").containerDefinitions[].image |= "$image"')
          echo $taskdef > ${{ env.TASK_DEFINITION_FILE }}

    - name: git push
      id: git-push
      run: |
        git config --local user.email ${{ env.GIT_USER_EMAIL }}
        git config --local user.name ${{ env.GIT_USER_NAME }}
        git branch
        git add ${{ env.TASK_DEFINITION_FILE }}
        git commit -m "[UpdateImageTag] ${{ github.event.repositories.name }} $GITHUB_SHA"
        git push

  slackNotification:
    if: always()
    needs: [updateTaskDefinitions]
    name: workflow notification to slack
    runs-on: ubuntu-latest
    steps:
      - uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ env.SLACK_WEBHOOK }}
