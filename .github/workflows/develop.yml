on:
  push:
    branches: 
    - develop

name: develop

env:
  AWS_ACCOUNT_ID: 858884198044
  AWS_REGION: ap-northeast-1
  AWS_ROLE_ARN: arn:aws:iam::858884198044:role/github_deployment_develop
  BUILD_ENV: develop
  IMAGE_TAG: develop-${{ github.sha }}
  TASK_DEFINITION_FILE: simple-community-develop/api-main/task-definition.json
  DEPLOY_REPO_NAME: simple-community-deploy
  DEPLOY_REPO_REF: refs/heads/develop
  GIT_USER_NAME: Deploy
  GIT_USER_EMAIL: yoshinori.satoh.tokyo@gmail.com
  SLACK_WEBHOOK: ${{ secrets.SIMPLE_COMMUNITY_DEV_SLACK_WEBHOOK }}

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      status: ${{ job.status }}
    strategy:
      matrix:
        include: 
        - target: release
          ecr_repository: simple-community-api-main
    steps:        
    - name: Docker build
      uses: yoshinori-development/simple-community-actions-build@master
      with: 
        aws_role_arn: ${{ env.AWS_ROLE_ARN }}
        aws_region: ${{ env.AWS_REGION }}
        ecr_repository: ${{ matrix.ecr_repository }}
        image_tag: ${{ env.IMAGE_TAG }}
        build_target: ${{ matrix.target }}

  updateTaskDefinitions:
    name: UpdateTaskDefinitions
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    outputs:
      status: ${{ job.status }}
    steps:        
    - name: Update Task Definitions
      uses: yoshinori-development/simple-community-actions-update-taskdef@master
      with: 
        aws_account_id: ${{ env.AWS_ACCOUNT_ID }}
        aws_role_arn: ${{ env.AWS_ROLE_ARN }}
        aws_region: ${{ env.AWS_REGION }}
        git_user_email:  ${{ env.GIT_USER_EMAIL }}
        git_user_name:  ${{ env.GIT_USER_NAME }}
        image_tag: ${{ env.IMAGE_TAG }}
        deploy_repo_name: ${{ env.DEPLOY_REPO_NAME }}
        deploy_repo_ref: ${{ env.DEPLOY_REPO_REF }}
        token: ${{ secrets.DEPLOY_PERSONAL_ACCESS_TOKEN }}
        task_definition_file: ${{ env.TASK_DEFINITION_FILE }} 
        targets: "[{ 1container1: 1api1, ecr_repository#: #simple-community-api-main# }]"

  slackNotification:
    if: always()
    needs: [updateTaskDefinitions]
    name: workflow notification to slack
    runs-on: ubuntu-latest
    steps:
      - uses: Gamesight/slack-workflow-status@master
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          slack_webhook_url: ${{ env.SLACK_WEBHOOK }}
